C51 COMPILER V9.59.0.0   MAIN                                                              07/24/2023 14:02:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          //Code by CacPixel
   2          //using STC8G1K08(TSSOP20)
   3          
   4          #include "stc8g.h"
   5          #include "intrins.h"
   6          #include "main.h"
   7          #include "stdio.h"
   8          #include "stdlib.h"
   9          #include "string.h"
  10          
  11          bit busy;
  12          char xdata rxbuffer;
  13          char xdata uartStartMsg[] = "/8051MeterUARTStart;\r\n";
  14          char xdata receiveStr[64];
  15          char xdata repeatMsg[32] = { 0 };
  16          char xdata msg[32] = { 0 };
  17          char* xdata receiveStrPtr = receiveStr;
  18          bit shouldProcess = 0;
  19          CommandTypeDef cmdtype = CMD_NULL;
  20          float xdata speed = 0;
  21          char xdata XCCAP2H;
  22          int xdata pwmVal;
  23          int xdata CMODVal;
  24          
  25          
  26          void PCA_Routine(void) interrupt 7
  27          {
  28   1          CF = 0;
  29   1      }
  30          
  31          void TM0_Isr() interrupt 1
  32          {
  33   1          if (shouldProcess) {
  34   2      
  35   2              cmdtype = runUARTCommand();
  36   2              if (cmdtype == CMD_INVALID) {
  37   3                  //command invalid
  38   3                  clearMsg(msg, sizeof(msg));
  39   3                  strcat(msg, "/cmd_invalid;\r\n");
  40   3                  Uart2SendStr(msg);
  41   3              }
  42   2              shouldProcess = 0;
  43   2          }
  44   1      }
  45          
  46          void Uart2ReceiveStr() {
  47   1          if (receiveStrPtr == receiveStr + sizeof(receiveStr) - 1) {
  48   2              *receiveStrPtr++ = 0;
  49   2          } else {
  50   2              *receiveStrPtr++ = rxbuffer;
  51   2          }
  52   1          return;
  53   1      }
  54          
C51 COMPILER V9.59.0.0   MAIN                                                              07/24/2023 14:02:18 PAGE 2   

  55          void Uart2Isr() interrupt 8
  56          {
  57   1          //S2TI
  58   1          if (S2CON & 0x02) {
  59   2              S2CON &= ~0x02;
  60   2              busy = 0;
  61   2          }
  62   1      
  63   1          //S2RI
  64   1          if (S2CON & 0x01) {
  65   2              S2CON &= ~0x01;
  66   2              rxbuffer = S2BUF;
  67   2              if (receiveStr == receiveStrPtr && rxbuffer != '/') {
  68   3                  return;
  69   3              }
  70   2      
  71   2              if (shouldProcess)
  72   2                  return;
  73   2      
  74   2              if (rxbuffer == '/')
  75   2                  cmdtype = CMD_NULL;
  76   2      
  77   2              Uart2ReceiveStr();
  78   2              if (receiveStrPtr == receiveStr + sizeof(receiveStr) || rxbuffer == ';') {
  79   3      
  80   3                  if (receiveStrPtr != receiveStr + sizeof(receiveStr))
  81   3                      *receiveStrPtr = 0;
  82   3                  else {
  83   4                      *(receiveStrPtr - 2) = ';';
  84   4                  }
  85   3                  receiveStrPtr = receiveStr;
  86   3                  shouldProcess = 1;
  87   3              }
  88   2          }
  89   1      }
  90          
  91          void Uart2Init() {
  92   1          S2CON = 0x10;
  93   1          T2L = BRT;
  94   1          T2H = BRT >> 8;
  95   1          AUXR = 0x14;
  96   1          busy = 0;
  97   1      }
  98          
  99          void Uart2Send(char dat) {
 100   1          while (busy);
 101   1          busy = 1;
 102   1          S2BUF = dat;
 103   1      }
 104          
 105          void Uart2SendStr(char* p) reentrant {
 106   1          while (*p) {
 107   2              Uart2Send(*p++);
 108   2          }
 109   1      }
 110          
 111          void PCAInit() {
 112   1          CCON = 0x00;
 113   1          CMOD = 0x0e;                                //PCA时钟为系统时钟/8
 114   1          CL = 0x00;
 115   1          CH = 0x00;
 116   1      
C51 COMPILER V9.59.0.0   MAIN                                                              07/24/2023 14:02:18 PAGE 3   

 117   1          P_SW1 |= 1 << 5;        //修改PCA引脚
 118   1          CCAPM2 = 0x42;                              //PCA模块2为PWM工作模式
 119   1          PCA_PWM2 = 0xc0;                            //PCA模块2输出10位PWM
 120   1          CCAP2L = 0xc8;                              //PWM占空比为96.875%[(400H-20H)/400H]
 121   1          CCAP2H = 0xc8;
 122   1          CR = 1;                                     //启动PCA计时器
 123   1      
 124   1      }
 125          
 126          void TIM0_Init() {
 127   1          AUXR &= 0x7F;                       //定时器时钟12T模式
 128   1          TMOD &= 0xF0;                       //设置定时器模式
 129   1          TL0 = 0x66;                         //设置定时初始值
 130   1          TH0 = 0xFC;                         //设置定时初始值
 131   1          TF0 = 0;                            //清除TF0标志
 132   1          TR0 = 1;                            //定时器0开始计时
 133   1          ET0 = 1;                                    //使能定时器中断
 134   1      }
 135          
 136          void WritePwmValue(int val) {
 137   1          XCCAP2H = ((val & 0x0300) >> 8);
 138   1          PCA_PWM2 = ((XCCAP2H << 4) | PCA_PWM2) & ((XCCAP2H << 4) | 0xcf);
 139   1          CCAP2H = (val & 0x00ff);
 140   1      }
 141          
 142          void SetMeterWithSpeed() {
 143   1          pwmVal = ((PWM_MAX - PWM_MIN) / 120.0 * (120.0 - speed)) + PWM_MIN;
 144   1          WritePwmValue(pwmVal);
 145   1      }
 146          
 147          CommandTypeDef runUARTCommand() {
 148   1          char* xdata speedPos;
 149   1          char* xdata p;
 150   1          int xdata proc_str[sizeof(receiveStr)];
 151   1      
 152   1      
 153   1          if (strstr((char*)receiveStr, "/get") != NULL) {
 154   2              cmdtype = CMD_GET;
 155   2              getOutputMsg(msg);
 156   2              Uart2SendStr(msg);
 157   2          } else if (strstr((char*)receiveStr, "/set:") != NULL) {
 158   2              cmdtype = CMD_SET;
 159   2              speedPos = strstr((char*)receiveStr, ":") + 1;
 160   2              strcpy((char*)proc_str, speedPos);
 161   2              speed = (float)atof((char*)proc_str);
 162   2              SetMeterWithSpeed();
 163   2          } else if (strstr((char*)receiveStr, "/inc:") != NULL) {
 164   2              cmdtype = CMD_INC;
 165   2              speedPos = strstr((char*)receiveStr, ":") + 1;
 166   2              strcpy((char*)proc_str, speedPos);
 167   2              speed += (float)atof((char*)proc_str);
 168   2              SetMeterWithSpeed();
 169   2          } else if (strstr((char*)receiveStr, "/dec:") != NULL) {
 170   2              cmdtype = CMD_DEC;
 171   2              speedPos = strstr((char*)receiveStr, ":") + 1;
 172   2              strcpy((char*)proc_str, speedPos);
 173   2              speed -= (float)atof((char*)proc_str);
 174   2              SetMeterWithSpeed();
 175   2          } else if (strstr((char*)receiveStr, "/light_on;") != NULL) {
 176   2              cmdtype = CMD_LIGHTON;
 177   2              LIGHT_ON;
 178   2          } else if (strstr((char*)receiveStr, "/light_off;") != NULL) {
C51 COMPILER V9.59.0.0   MAIN                                                              07/24/2023 14:02:18 PAGE 4   

 179   2              cmdtype = CMD_LIGHTOFF;
 180   2              LIGHT_OFF;
 181   2          } else if (strstr((char*)receiveStr, "/led_on;") != NULL) {
 182   2              cmdtype = CMD_LEDON;
 183   2              LED_ON;
 184   2          } else if (strstr((char*)receiveStr, "/led_off;") != NULL) {
 185   2              cmdtype = CMD_LEDOFF;
 186   2              LED_OFF;
 187   2          } else if (strstr((char*)receiveStr, "/PWM:") != NULL) {
 188   2              cmdtype = CMD_SET_PWM;
 189   2              p = strstr((char*)receiveStr, ":") + 1;
 190   2              strcpy((char*)proc_str, p);
 191   2              pwmVal = atoi((char*)proc_str);
 192   2              WritePwmValue(pwmVal);
 193   2          } else if (strstr((char*)receiveStr, "/CMOD:") != NULL) {
 194   2              cmdtype = CMD_SET_CMOD;
 195   2              p = strstr((char*)receiveStr, ":") + 1;
 196   2              strcpy((char*)proc_str, p);
 197   2              CMOD = (char)atox((char*)proc_str);
 198   2          } else {
 199   2              cmdtype = CMD_INVALID;
 200   2          }
 201   1          return cmdtype;
 202   1      }
 203          
 204          
 205          void Delay1000ms()              //@11.0592MHz
 206          {
 207   1          unsigned char i, j, k;
 208   1      
 209   1          i = 57;
 210   1          j = 27;
 211   1          k = 112;
 212   1          do {
 213   2              do {
 214   3                  while (--k);
 215   3              } while (--j);
 216   2          } while (--i);
 217   1      }
 218          
 219          
 220          void getOutputMsg(char* msg) {
 221   1          CMODVal = CMOD;
 222   1          clearMsg(msg, sizeof(msg));
 223   1          sprintf(msg, "/get:speed=%.2f,pwmVal=%d,CMOD=%#X;\r\n", \
 224   1              speed, pwmVal, CMODVal);
 225   1      }
 226          
 227          
 228          int atox(char* str) {
 229   1          int hex = 0;
 230   1          if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X')) {
 231   2              if (str[3] >= 'A' && str[3] <= 'Z') {
 232   3                  hex += str[3] - '0' - 8 + 1;
 233   3              } else if (str[3] >= 'a' && str[3] <= 'z') {
 234   3                  hex += str[3] - '0' - 40 + 1;
 235   3              } else {
 236   3                  hex += str[3] - '0';
 237   3              }
 238   2      
 239   2              if (str[2] >= 'A' && str[2] <= 'Z') {
 240   3                  hex += (str[2] - '0' - 8 + 1) * 16;
C51 COMPILER V9.59.0.0   MAIN                                                              07/24/2023 14:02:18 PAGE 5   

 241   3              } else if (str[2] >= 'a' && str[2] <= 'z') {
 242   3                  hex += (str[2] - '0' - 40 + 1) * 16;
 243   3              } else {
 244   3                  hex += (str[2] - '0') * 16;
 245   3              }
 246   2          }
 247   1          return hex;
 248   1      }
 249          
 250          
 251          
 252          
 253          void main() {
 254   1          int i = 0;
 255   1          P0M0 = 0x00;
 256   1          P0M1 = 0x00;
 257   1          P1M0 = 0x1 << 2;
 258   1          P1M1 = 0x00;
 259   1          P2M0 = 0x00;
 260   1          P2M1 = 0x00;
 261   1          P3M0 = 0x00;
 262   1          P3M1 = 0x00;
 263   1          P4M0 = 0x00;
 264   1          P4M1 = 0x00;
 265   1          P5M0 = 0x00;
 266   1          P5M1 = 0x00;
 267   1          PCAInit();
 268   1          Uart2Init();
 269   1          TIM0_Init();
 270   1      
 271   1          IE2 = 0x01;
 272   1          IP = 0x80;
 273   1          IPH = 0x80;
 274   1          IP2 = 0x00;
 275   1          IP2H = 0x01;
 276   1          EA = 1;
 277   1          SetMeterWithSpeed();
 278   1      
 279   1          Uart2SendStr(uartStartMsg);
 280   1      
 281   1          while (1) {
 282   2              Delay1000ms();
 283   2              CMODVal = CMOD;
 284   2              sprintf(repeatMsg, "/status:speed=%.2f,pwmVal=%d,CMOD=%#X;\r\n", \
 285   2                  speed, pwmVal, CMODVal);
 286   2              Uart2SendStr(repeatMsg);
 287   2          }
 288   1      }
 289          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1883    ----
   CONSTANT SIZE    =    175    ----
   XDATA SIZE       =    164     134
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
